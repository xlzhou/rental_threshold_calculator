// Internationalization (i18n) system for Rental Threshold Calculator

class I18n {
    constructor() {
        this.currentLanguage = localStorage.getItem('language') || 'zh';
        this.translations = {
            en: {
                // Header
                'title': 'Rental Threshold Calculator',
                'subtitle': 'Optimize rental inventory decisions with threshold-based policies',
                'help': 'üìñ Help',
                
                // Configuration Section
                'configuration': 'Configuration',
                'starting_inventory': 'Starting Inventory (servers):',
                'number_of_periods': 'Horizon Length (days):',
                'unit_cost': 'Unit Cost (K):',
                'salvage_value': 'Salvage Value (s):',
                'arrival_rate': 'Arrival Rate (per period):',
                'price_unit': 'Price/Cost Unit:',
                'per_day': 'Per-day',
                'per_month': 'Per-month',
                'days_per_month': 'Days per month:',
                'target_leftover': 'Target Leftover (L*):',
                'failure_threshold': 'Failure Threshold:',
                'cost_floor': 'Cost Floor (optional):',
                'empirical_prices': 'Empirical Prices (comma-separated):',
                'upload_csv': 'Or upload CSV file:',
                'calculate_threshold': 'Calculate Threshold',
                'reset_form': 'Reset Form',
                
                // Static Threshold Analysis
                'static_threshold_analysis': 'Static Threshold Analysis',
                'optimal_threshold': 'Optimal Threshold (K)',
                'operational_cutoff': 'Operational Cutoff (K)',
                'expected_accepts': 'Expected Accepts',
                'expected_leftover': 'Expected Leftover',
                'conditional_mean_price': 'Conditional Mean Price (K)',
                'expected_profit': 'Expected Profit (K)',
                
                // Dynamic Programming Analysis
                'dynamic_programming_analysis': 'Dynamic Programming Analysis',
                'initial_value_function': 'Initial Value Function V‚ÇÄ(X)',
                'initial_bid_price': 'Initial Bid Price b‚ÇÄ(X)',
                'initial_threshold': 'Initial Threshold (K)',
                
                // Decision Guidance
                'decision_guidance': 'Decision Guidance',
                'calculate_first': 'Calculate threshold first to see guidance',
                'export_csv': 'Export CSV',
                'export_json': 'Export JSON',
                
                // Live Offer Decision
                'live_offer_decision': 'Live Offer Decision',
                'offer_price': 'Offer Price (K):',
                'current_period': 'Current Period:',
                'current_inventory': 'Current Inventory:',
                'rental_duration': 'Rental Duration (periods):',
                'offer_type': 'Offer Type:',
                'per_period': 'Per-period price',
                'total_price': 'Total price',
                'decision_method': 'Decision Method:',
                'dynamic_programming_recommended': 'Dynamic Programming (Recommended)',
                'static_threshold': 'Static Threshold',
                'check_offer': 'Check Offer',
                'current_dynamic_threshold': 'Current Dynamic Threshold',
                'threshold_current_state': 'Threshold for current state:',
                'sobp_threshold_per': 'SOBP per-period (D):',
                'sobp_threshold_total': 'SOBP total (D):',
                'static_comparison': 'Static threshold:',
                'threshold_auto_update': 'Threshold updates automatically based on current period and inventory',
                'decision': 'Decision:',
                'make_offer_decision': 'Make an offer decision to see results',
                
                // Pacing Status
                'pacing_status': 'Pacing Status(Ê£ÄÊü•ÈîÄÂîÆËøõÂ∫¶ÔºåÂèØ‰ª•ÂøΩÁï•)',
                'pacing_hint_title': 'üí° Hint:',
                'pacing_hint_text': 'For pacing check, you only need to fill:',
                'pacing_hint_inventory': '‚úì Starting Inventory (servers) - Used to calculate total units that need to be sold',
                'pacing_hint_periods': '‚úì Horizon Length (days) - Used to determine mid-horizon timing (days √∑ 2)',
                'pacing_hint_leftover': '‚úì Target Leftover (L*) - Used in target calculation: (Inventory - Target Leftover) √ó 50%',
                'pacing_hint_period': '‚úì Current Period - Used to check timing (defaults to 0 if empty = "too early")',
                'pacing_hint_accepted': '‚úì Accepted Units So Far - Compared against target to determine if on track or behind',
                'pacing_logic_title': 'üìä Pacing Logic:',
                'pacing_logic_early': 'Too Early: If Current Period < Number of Periods √∑ 2',
                'pacing_logic_target': 'Target by Mid-Horizon: (Starting Inventory - Target Leftover) √ó 50%',
                'pacing_logic_track': 'On Track: Accepted So Far ‚â• Target',
                'pacing_logic_behind': 'Behind: Accepted So Far < Target ‚Üí Recommend relaxing threshold',
                'pacing_logic_note': 'Other fields with red * are not required for pacing analysis.',
                'accepted_units_so_far': 'Accepted Units So Far:',
                'check_pacing': 'Check Pacing',
                'status': 'Status:',
                'relax_threshold': 'Relax Threshold',
                
                // Footer
                'version': 'Rental Threshold Calculator v1.0',
                
                // Messages
                'calculating': 'Calculating...',
                'form_reset_success': 'Form reset successfully',
                'calculation_success': 'Calculation completed successfully!',
                'no_results': 'Please calculate threshold first',
                'network_error': 'Network error:'
            },
            zh: {
                // Header
                'title': 'ÁßüËµÅÈòàÂÄºËÆ°ÁÆóÂô®',
                'subtitle': 'Âü∫‰∫éÈòàÂÄºÁ≠ñÁï•‰ºòÂåñÁßüËµÅÂ∫ìÂ≠òÂÜ≥Á≠ñ',
                'help': 'üìñ Â∏ÆÂä©',
                
                // Configuration Section
                'configuration': 'ÈÖçÁΩÆ',
                'starting_inventory': 'Ëµ∑ÂßãÂ∫ìÂ≠òÔºàÊúçÂä°Âô®ÔºâÔºö',
                'number_of_periods': 'ÈîÄÂîÆÂë®ÊúüÂÜÖÊÄªÂ§©Êï∞Ôºö',
                'unit_cost': 'Âçï‰ΩçÊàêÊú¨ÔºàKÔºâÔºö',
                'salvage_value': 'ÊÆãÂÄºÔºàsÔºâÔºö',
                'arrival_rate': 'ÊØèÂë®ÊúüÊä•‰ª∑Âà∞ËææÁéáÔºö',
                'target_leftover': 'ÁõÆÊ†áÂâ©‰ΩôÔºàL*ÔºâÔºö',
                'failure_threshold': 'Â§±Ë¥•Ââ©‰ΩôÂ∫ìÂ≠òÊï∞Ôºö',
                'cost_floor': 'ÊàêÊú¨‰∏ãÈôêÔºà‰∏çÂ°´Âàô‰∏∫ÊàêÊú¨‰ª∑ÔºâÔºö',
                'empirical_prices': 'ÁªèÈ™å‰ª∑Ê†ºÔºàËã±ÊñáÈÄóÂè∑ÂàÜÈöîÔºâÔºö',
                'upload_csv': 'Êàñ‰∏ä‰º† CSV Êñá‰ª∂Ôºö',
                'calculate_threshold': 'ËÆ°ÁÆóÈòàÂÄº',
                'reset_form': 'ÈáçÁΩÆË°®Âçï',
                
                // Static Threshold Analysis
                'static_threshold_analysis': 'ÈùôÊÄÅÈòàÂÄºÂàÜÊûê',
                'optimal_threshold': 'ÊúÄ‰ºòÈòàÂÄºÔºàKÔºâ',
                'operational_cutoff': 'ËøêËê•Êà™Ê≠¢ÁÇπÔºàKÔºâ',
                'expected_accepts': 'È¢ÑÊúüÊàê‰∫§Âè∞Êï∞',
                'expected_leftover': 'È¢ÑÊúüÂâ©‰Ωô',
                'conditional_mean_price': 'Êù°‰ª∂Âùá‰ª∑ÔºàKÔºâ',
                'expected_profit': 'È¢ÑÊúüÂà©Ê∂¶ÔºàKÔºâ',
                
                // Dynamic Programming Analysis
                'dynamic_programming_analysis': 'Âä®ÊÄÅËßÑÂàíÂàÜÊûê',
                'initial_value_function': 'ÂàùÂßã‰ª∑ÂÄºÂáΩÊï∞ V‚ÇÄ(X)',
                'initial_bid_price': 'ÂàùÂßãÁ´û‰ª∑ b‚ÇÄ(X)',
                'initial_threshold': 'ÂàùÂßãÈòàÂÄºÔºàKÔºâ',
                
                // Decision Guidance
                'decision_guidance': 'ÂÜ≥Á≠ñÊåáÂØº',
                'calculate_first': 'ËØ∑ÂÖàËÆ°ÁÆóÈòàÂÄº‰ª•Êü•ÁúãÊåáÂØº',
                'export_csv': 'ÂØºÂá∫ CSV',
                'export_json': 'ÂØºÂá∫ JSON',
                
                // Live Offer Decision
                'live_offer_decision': 'ÂÆûÊó∂Êä•‰ª∑ÂÜ≥Á≠ñ',
                'offer_price': 'Êä•‰ª∑ÔºàKÔºâÔºö',
                'price_unit': '‰ª∑Ê†º/ÊàêÊú¨Âè£ÂæÑÔºö',
                'per_day': 'ÊåâÊó•',
                'per_month': 'ÊåâÊúà',
                'days_per_month': 'ÊØèÊúàÊäòÁÆóÂ§©Êï∞Ôºö',
                'current_period': 'ÂΩìÂâçÂë®ÊúüÔºàÁ¨¨Âá†Â§©ÔºâÔºö',
                'current_inventory': 'ÂΩìÂâçÂ∫ìÂ≠òÔºö',
                'rental_duration': 'ÁßüÊúüÔºàÂë®ÊúüÊï∞ÔºâÔºö',
                'offer_type': 'Êä•‰ª∑Âè£ÂæÑÔºö',
                'per_period': 'ÊåâÊúü‰ª∑Ê†º',
                'total_price': 'Êï¥ÂçïÊÄª‰ª∑',
                'decision_method': 'ÂÜ≥Á≠ñÊñπÊ≥ïÔºö',
                'dynamic_programming_recommended': 'Âä®ÊÄÅËßÑÂàíÔºàÊé®ËçêÔºâ',
                'static_threshold': 'ÈùôÊÄÅÈòàÂÄº',
                'check_offer': 'Ê£ÄÊü•Êä•‰ª∑',
                'current_dynamic_threshold': 'ÂΩìÂâçÂä®ÊÄÅÈòàÂÄº',
                'threshold_current_state': 'ÂΩìÂâçÁä∂ÊÄÅÁöÑÈòàÂÄºÔºö',
                'sobp_threshold_per': 'SOBP ÊØèÊúüÈòàÂÄºÔºàDÔºâÔºö',
                'sobp_threshold_total': 'SOBP Êï¥ÂçïÈòàÂÄºÔºàDÔºâÔºö',
                'static_comparison': 'ÈùôÊÄÅÈòàÂÄºÔºö',
                'threshold_auto_update': 'ÈòàÂÄºÂü∫‰∫éÂΩìÂâçÂë®ÊúüÂíåÂ∫ìÂ≠òËá™Âä®Êõ¥Êñ∞',
                'decision': 'ÂÜ≥Á≠ñÔºö',
                'make_offer_decision': 'ÂÅöÂá∫Êä•‰ª∑ÂÜ≥Á≠ñ‰ª•Êü•ÁúãÁªìÊûú',
                
                // Pacing Status
                'pacing_status': 'ËøõÂ∫¶Áä∂ÊÄÅÔºàÈîÄÂîÆËøõÂ∫¶Ê£ÄÊü•Ôºâ',
                'pacing_hint_title': 'üí° ÊèêÁ§∫Ôºö',
                'pacing_hint_text': 'ËøõÂ∫¶Ê£ÄÊü•Âè™ÈúÄË¶ÅÂ°´ÂÜôÔºö',
                'pacing_hint_inventory': '‚úì Ëµ∑ÂßãÂ∫ìÂ≠òÔºàÊúçÂä°Âô®Ôºâ- Áî®‰∫éËÆ°ÁÆóÈúÄË¶ÅÈîÄÂîÆÁöÑÊÄªÂçï‰ΩçÊï∞',
                'pacing_hint_periods': '‚úì ÈîÄÂîÆÂë®ÊúüÂÜÖÊÄªÂ§©Êï∞ - Áî®‰∫éÁ°ÆÂÆö‰∏≠ÊúüÊó∂Èó¥ÁÇπÔºàÂ§©Êï∞ √∑ 2Ôºâ',
                'pacing_hint_leftover': '‚úì ÁõÆÊ†áÂâ©‰ΩôÔºàL*Ôºâ- Áî®‰∫éÁõÆÊ†áËÆ°ÁÆóÔºöÔºàÂ∫ìÂ≠ò - ÁõÆÊ†áÂâ©‰ΩôÔºâ√ó 50%',
                'pacing_hint_period': '‚úì ÂΩìÂâçÂë®Êúü - Áî®‰∫éÊ£ÄÊü•Êó∂Èó¥ÔºàÂ¶Ç‰∏∫Á©∫ÈªòËÆ§‰∏∫0 = "Â§™Êó©"Ôºâ',
                'pacing_hint_accepted': '‚úì Â∑≤Êé•ÂèóÂçï‰ΩçÊï∞ - ‰∏éÁõÆÊ†áÊØîËæÉ‰ª•Á°ÆÂÆöÊòØÂê¶ÊåâËÆ°ÂàíËøõË°åÊàñËêΩÂêé',
                'pacing_logic_title': 'üìä ËøõÂ∫¶ÈÄªËæëÔºö',
                'pacing_logic_early': 'Â§™Êó©ÔºöÂ¶ÇÊûúÂΩìÂâçÂë®Êúü < Âë®ÊúüÊï∞ √∑ 2',
                'pacing_logic_target': '‰∏≠ÊúüÁõÆÊ†áÔºöÔºàËµ∑ÂßãÂ∫ìÂ≠ò - ÁõÆÊ†áÂâ©‰ΩôÔºâ√ó 50%',
                'pacing_logic_track': 'ÊåâËÆ°ÂàíÔºöÂ∑≤Êé•ÂèóÊï∞ ‚â• ÁõÆÊ†á',
                'pacing_logic_behind': 'ËêΩÂêéÔºöÂ∑≤Êé•ÂèóÊï∞ < ÁõÆÊ†á ‚Üí Âª∫ËÆÆÊîæÂÆΩÈòàÂÄº',
                'pacing_logic_note': 'ÂÖ∂‰ªñÂ∏¶Á∫¢Ëâ≤ * ÁöÑÂ≠óÊÆµ‰∏çÊòØËøõÂ∫¶ÂàÜÊûêÂøÖÈúÄÁöÑ„ÄÇ',
                'accepted_units_so_far': 'Âà∞ÁõÆÂâç‰∏∫Ê≠¢Â∑≤Êé•ÂèóÂçï‰ΩçÊï∞Ôºö',
                'check_pacing': 'Ê£ÄÊü•ËøõÂ∫¶',
                'status': 'Áä∂ÊÄÅÔºö',
                'relax_threshold': 'ÊîæÂÆΩÈòàÂÄº',
                
                // Footer
                'version': 'ÁßüËµÅÈòàÂÄºËÆ°ÁÆóÂô® v1.0',
                
                // Messages
                'calculating': 'ËÆ°ÁÆó‰∏≠...',
                'form_reset_success': 'Ë°®ÂçïÈáçÁΩÆÊàêÂäü',
                'calculation_success': 'ËÆ°ÁÆóÂÆåÊàêÔºÅ',
                'no_results': 'ËØ∑ÂÖàËÆ°ÁÆóÈòàÂÄº',
                'network_error': 'ÁΩëÁªúÈîôËØØÔºö'
            }
        };
        
        this.initializeLanguage();
    }

    initializeLanguage() {
        this.updateAllTexts();
        this.updateLanguageSelector();
    }

    setLanguage(lang) {
        if (this.translations[lang]) {
            this.currentLanguage = lang;
            localStorage.setItem('language', lang);
            this.updateAllTexts();
            this.updateLanguageSelector();
        }
    }

    t(key) {
        return this.translations[this.currentLanguage][key] || this.translations['en'][key] || key;
    }

    updateAllTexts() {
        // Update all elements with data-i18n attributes
        const elements = document.querySelectorAll('[data-i18n]');
        elements.forEach(element => {
            const key = element.getAttribute('data-i18n');
            const translation = this.t(key);
            
            if (element.tagName === 'INPUT' && (element.type === 'submit' || element.type === 'button')) {
                element.value = translation;
            } else if (element.tagName === 'INPUT' && element.hasAttribute('placeholder')) {
                element.placeholder = translation;
            } else {
                element.textContent = translation;
            }
        });

        // Update document title
        document.title = this.t('title');
        
        // Update HTML lang attribute
        document.documentElement.lang = this.currentLanguage === 'zh' ? 'zh-CN' : 'en';
    }

    updateLanguageSelector() {
        const selector = document.getElementById('language-selector');
        if (selector) {
            selector.value = this.currentLanguage;
        }
    }

    getCurrentLanguage() {
        return this.currentLanguage;
    }
}

// Global i18n instance
window.i18n = new I18n();
